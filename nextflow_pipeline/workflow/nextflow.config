// CONFIGURATION FILE


// Pipeline parameter default values, can be modified by user when calling pipeline on command line (e.g. --ont_reads_fq sample_1.fastq) ##

// Input fastq reads
params.ont_reads_fq = 'None'

// Input sequencing summary files
params.ont_reads_txt = 'None'

// Input reference fasta file
params.ref = 'None' 

// Input bed file for housekeeping genes (RSEQc)
params.housekeeping = 'None' 

// Input GTF/GFF genomic annotation
params.annotation = 'None' 

// Output directory for pipeline results
params.out_dir = "output_directory/" 

// Logical, is the reference CHM13?
params.is_chm13 = "False" 

// Fast5 directory if basecalling data
params.fast5_dir = 'None' 

// Sample id for files being basecalled
params.basecall_id = "None" 

// Basecalling configuration as specified in guppy
params.basecall_config = "None" 

// Want to concatenate ERCC GTF to CHM13 GFF? Add the ERCC gtf file here
params.ercc = "None" 

// cDNA sequencing kit adapters for Pychopper to trim and orient reads
params.cdna_kit = "PCS111" 

// MultiQC configuration file
params.multiqc_config = "None" 

// Logical, do you want to perform discovery using Bambu? True = Yes
params.is_discovery = "None" 

// NDR value for Bambu novel discovery filtering - Leave it on Auto for most applications
params.NDR = "auto" 

// Logical, Track Bambu read assignments. True = Track. Tracking uses more memory, but allows you to extract reads that align to specific transcripts
params.track_reads = "False" 

// MAPQ filtering threshold for bam files, 0 for no filtering
params.mapq = "0" 

// Which step of the pipeline to perform. 1 = Basecalling, 2 = Pre-processing, 3 = Discovery and quantification
params.step = "None" 

// Directory with MultiQC input for making report.
params.multiqc_input = "None" 

// Directory containing RDS files
params.bambu_rds = "None" 

// Index file for reference genome
params.fai = "None" 

// Unfiltered bam file input if you want to start from the bam filtering step
params.bam = "None" 

// Unfiltered bam index file input if you want to start from the bam filtering step
params.bai = "None" 

// Binary boolean parameter to check if user is performing Direct RNAseq analysis
params.is_dRNA = "False"


process { 

    // Define job scheduler parameters for jobs that require little memory computation/memory ##

    withLabel: tiny {
        executor='slurm'
        clusterOptions='--partition normal --time 00:15:00 --account coa_mteb223_uksr --nodes 1 --ntasks 1 --cpus-per-task 4 --mem-per-cpu 4G'
    }



    withLabel: small {
        executor='slurm'
        clusterOptions='--partition normal --time 1:00:00 --account coa_mteb223_uksr --nodes 1 --ntasks 1 --cpus-per-task 8 --mem-per-cpu 4G'
    }



    // Define job scheduler parameters for jobs that require medium computation/memory ##

    withLabel: medium_small {
        
        executor='slurm'
        clusterOptions='--partition normal --time 23:00:00 --account coa_mteb223_uksr --nodes 1 --ntasks 1 --cpus-per-task 12 --mem-per-cpu 4G'
        }


    withLabel: medium {
        executor='slurm'
        clusterOptions='--partition normal --time 23:00:00 --account coa_mteb223_uksr --nodes 1 --ntasks 1 --cpus-per-task 16 --mem-per-cpu 4G'
        }

    withLabel: medium_large {
        executor='slurm'
        clusterOptions='--partition normal --time 23:00:00 --account coa_mteb223_uksr --nodes 1 --ntasks 1 --cpus-per-task 20 --mem-per-cpu 4G'
    }

    // Define job scheduler parameters for jobs that require lots of computation/memory ##

    withLabel: large {
        executor='slurm'
        clusterOptions='--partition normal --time 23:00:00 --account coa_mteb223_uksr --nodes 1 --ntasks 1 --cpus-per-task 50 --mem-per-cpu 4G'
    }

    withLabel: bambu_prep_job {
        executor='slurm'
        clusterOptions='--partition normal --time 23:00:00 --account coa_mteb223_uksr --nodes 1 --ntasks 1 --cpus-per-task 12 --mem-per-cpu 16G'
        }

    withLabel: huge {
        executor='slurm'
        clusterOptions='--partition normal --time 23:00:00 --account coa_mteb223_uksr --nodes 1 --ntasks 1 --cpus-per-task 1 --mem-per-cpu 500G'
    }

    // Define local execution

    withLabel: local {
        executor='local'
    }

    withLabel: gpu {
        executor='slurm'
        clusterOptions='--partition P4V12_SKY32M192_L --time 00:15:00 --account gol_mteb223_uksr --gres=gpu:1 --mem 16G'
    }
    
    // Define cluster options for BAMBU_DUSCOVERY and BAMBU_QUANT
    withLabel: huge_long {
        executor='slurm'
        clusterOptions='--partition normal --time 7-00:00:00 --account coa_mteb223_uksr --nodes 1 --mem-per-cpu 41G --ntasks 1 --cpus-per-task 12'
    }

    // Define the singularity containers for each process, will pull containers from the cloud

    // Nanopore
    withName: "(GFFCOMPARE|MAKE_INDEX_cDNA|MAKE_INDEX_dRNA|MINIMAP2_cDNA|MINIMAP2_dRNA|MINIMAP2_QC|FILTER_BAM|PYCHOPPER|STRINGTIE_ONT_cDNA|MAKE_FAI|MAKE_TRANSCRIPTOME)" {
        container = "library://ebbertlab/nanopore_cdna/nanopore:sha256.1e78cf38407f51f1742a996adcb6bed9019e103ffd830fa210fa0194014b5064"
    }

    // Quality Control
    withName: "(MULTIQC_GRCh38|MULTIQC_CHM13|RSEQC|PYCOQC|PYCOQC_dRNA|DECOMPRESS|TRIM_GALORE|CHM13_GTF_ERCC|CHM13_GTF)" {
        container = "library://ebbertlab/nanopore_cdna/quality_control:sha256.ee1d1119b5e0dda74da7d4896c2577302bd8066f4cccefc067a3253f4127c92a"
    }

    // Basecalling
    withName: "(BASECALL|GATHER_BASECALL)" {
        container = "library://ebbertlab/nanopore_cdna/guppy:sha256.80d73ed421e17199390658662453c2c37c8e64435d8b402822a107247882915f"
        singularity.runOptions='--nv'
    }

    // Bambu
    withName: "(BAMBU_PREP|BAMBU_DISCOVERY|BAMBU_QUANT)" {
        container = "library://ebbertlab/nanopore_cdna/bambu:sha256.152511f143e497212d2b711dbb94eba775270ac4ee196fbce12dc245fcac404f"
    }

}



// Define executor type and maximum queue size for jobs at once ##

executor {

    name="slurm"
    queueSize = 50
}

// Point to singularity image with the tools necessary to run the pipeline

singularity {
    
    enabled = true
}

